<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">


    
  <url>
    <loc>http://wanggl1985.github.io/2017/12/23/%E6%B5%81%E7%95%85%E7%9A%84-Shell/</loc>
    <lastmod>2019-03-18T00:51:18.645Z</lastmod>
    <data>
        <display>
        <title>流畅的 Shell</title>
        <pubTime>2017-12-23T02:47:58.000Z</pubTime>
        
        <tag>shell</tag>
         
         
           
             
              <breadCrumb title="tools" url="http://wanggl1985.github.io/categories/tools/"/>
          
             
              <breadCrumb title="shell" url="http://wanggl1985.github.io/categories/tools/shell/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/08/01/effcpp3d-2016-08-01-Item-50-Understand-when-it-makes-sense-to-replace-new-and-delete/</loc>
    <lastmod>2018-03-10T09:54:33.218Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记50』 了解 new 和 delete 的合理替换时机</title>
        <pubTime>2016-08-01T06:23:45.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/15/effcpp3d-2016-07-15-Item-49-understand-the-behavior-of-the-new-handler/</loc>
    <lastmod>2018-03-10T09:41:59.993Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记49』 了解 new-handler 的行为</title>
        <pubTime>2016-07-15T11:28:33.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/22/effcpp3d-2016-07-22-Item-44-factor-parameter-independent-code-out-of-template/</loc>
    <lastmod>2018-03-09T07:50:34.957Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记44』 将与参数无关的代码抽离 templates</title>
        <pubTime>2016-07-22T02:01:16.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/20/effcpp3d-2016-07-20-Item-42-understand-the-two-meaning-of-typename/</loc>
    <lastmod>2018-03-09T07:49:29.359Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记42』 了解 typename 的双重意义</title>
        <pubTime>2016-07-20T01:18:02.000Z</pubTime>
        
        <tag>Effective cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/21/effcpp3d-2016-07-21-Item-43-know-how-to-access-names-in-templatized-base-classes/</loc>
    <lastmod>2018-03-09T07:49:25.145Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记43』 学习处理模板化基类内的名称</title>
        <pubTime>2016-07-21T01:42:37.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/19/effcpp3d-2016-07-19-Item-41-understand-implicit-interfaces-and-compile-time-polymorphism/</loc>
    <lastmod>2018-03-09T07:24:47.805Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记41』  理解隐式接口和编译期多态</title>
        <pubTime>2016-07-19T00:34:51.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/20/effcpp3d-2016-12-26-Item-40-use-multiple-inheritance-judiciously/</loc>
    <lastmod>2018-03-09T06:17:31.390Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记40』 use multiple inheritance judiciously</title>
        <pubTime>2016-07-20T13:22:54.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/18/effcpp3d-2016-07-18-Item-39-use-private-inheritance-judiciously/</loc>
    <lastmod>2018-03-09T04:10:28.440Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记39』 明智而审慎地使用 private 继承</title>
        <pubTime>2016-07-18T03:46:15.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/17/effcpp3d-2016-07-17-Item-38-model-has-a-or-is-implemented-in-terms-of-through-composition/</loc>
    <lastmod>2018-03-09T03:53:28.204Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记38』 通过复合塑模出 has-a 或根据某物实现出</title>
        <pubTime>2016-07-17T03:13:27.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/16/effcpp3d-2016-07-16-Item-37-%E7%BB%9D%E4%B8%8D%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89%E7%BB%A7%E6%89%BF%E8%80%8C%E6%9D%A5%E7%9A%84%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0%E5%80%BC/</loc>
    <lastmod>2018-03-09T03:52:10.138Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记37』 绝不重新定义继承而来的缺省参数值</title>
        <pubTime>2016-07-15T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/15/effcpp3d-2016-07-15-Item-36-never-redefine-an-inherited-non-virtual-function/</loc>
    <lastmod>2018-03-09T03:11:33.796Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记36』 绝不重新定义继承而来的 non-virtual 函数</title>
        <pubTime>2016-07-15T02:38:41.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/15/effcpp3d-2016-07-15-Item-35-consider-alternatives-to-virtual-functions/</loc>
    <lastmod>2018-03-09T02:56:08.346Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记35』 考虑 virtual 以外的其他选择</title>
        <pubTime>2016-07-15T05:47:43.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/14/effcpp3d-2016-07-14-Item-34-differentiate-between-inheritance-of-interface-and-inheritance-of-implementation/</loc>
    <lastmod>2018-03-09T02:53:02.455Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记34』 区分接口继承和实现继承</title>
        <pubTime>2016-07-14T01:26:13.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/13/effcpp3d-2016-07-13-Item-33-avoid-hiding-inherited-names/</loc>
    <lastmod>2018-03-09T02:17:28.514Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记33』 避免遮掩继承而来的名称</title>
        <pubTime>2016-07-13T01:03:06.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/12/effcpp3d-2016-07-12-Item-32-make-sure-public-inheritabce-models-is-a/</loc>
    <lastmod>2018-03-09T01:55:17.421Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记32』 确定你的 public 继承塑模出 is-a 关系</title>
        <pubTime>2016-07-12T00:42:40.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/10/effcpp3d-2016-07-11-Item-31-minimize-compilation-dependencies-between-files/</loc>
    <lastmod>2018-03-08T08:36:55.891Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记31』 将文件间的编译依存关系降至最低</title>
        <pubTime>2016-07-10T07:59:26.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/10/effcpp3d-2016-07-10-Item-30-understand-the-ins-and-outs-of-inlining/</loc>
    <lastmod>2018-03-08T08:35:37.600Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记30』 透彻了解 inlining 的里里外外</title>
        <pubTime>2016-07-10T06:51:38.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/09/effcpp3d-2016-07-09-Item-29-strive-for-exception-safe-code/</loc>
    <lastmod>2018-03-08T08:32:15.361Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记29』 为『异常安全』而努力是值得的</title>
        <pubTime>2016-07-09T05:50:59.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/06/effcpp3d-2016-07-08-Item-28-avoid-return-handles-to-object-internels/</loc>
    <lastmod>2018-03-08T05:59:10.926Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记28』避免返回 handles 指向对象内部成分</title>
        <pubTime>2016-07-06T02:36:51.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/07/effcpp3d-2016-07-07-Item-27-minimize-casting/</loc>
    <lastmod>2018-03-08T05:00:46.974Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记27』 尽量少做转型动作</title>
        <pubTime>2016-07-07T02:36:51.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/06/effcpp3d-2016-07-06-item-26-postpone-variable-definitions-as-long-as-possible/</loc>
    <lastmod>2018-03-08T05:00:28.483Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记26』 尽可能延后变量定义式的出现时间</title>
        <pubTime>2016-07-06T02:11:45.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/08/effcpp3d-2016-07-06-Item-25-consider-support-for-a-non-throwing-swap/</loc>
    <lastmod>2018-03-08T04:46:59.691Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记25』考虑写出一个不抛出异常的 swap 函数</title>
        <pubTime>2016-07-08T01:05:49.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/06/effcpp3d-2016-07-06-Item-24-declare-non-member-functions-when-type-conversions-should-apply-to-all-parameters/</loc>
    <lastmod>2018-03-08T02:14:48.704Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记24』 若所有参数皆需要类型转换，请为此采用 non-member 函数</title>
        <pubTime>2016-07-06T00:39:49.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/05/effcpp3d-2016-07-05-Item-23-prefer-non-member-non-friend-functions-to-member-functions/</loc>
    <lastmod>2018-03-08T02:00:20.589Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记23』 宁以 non-member,non-friend 替换 member 函数</title>
        <pubTime>2016-07-05T08:08:44.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/24/effcpp3d-2016-05-24-Item-22-declear-data-member-private/</loc>
    <lastmod>2018-03-08T01:43:19.719Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记22』将成员变量声明为 private</title>
        <pubTime>2016-05-24T07:12:57.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/23/effcpp3d-2016-05-23-Item-21-do-try-to-return-a-reference-when-you-must-return-an-object/</loc>
    <lastmod>2018-03-08T01:39:32.660Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记21』 必须返回对象时，别妄想返回其 reference</title>
        <pubTime>2016-05-23T07:12:57.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/20/effcpp3d-2016-05-22-Item-20-Prefer-pass-by-reference-const-to-const-to-pass-by-value/</loc>
    <lastmod>2018-03-07T15:08:53.198Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记20』 宁以 pass-by-reference-to-const 替换 pass-by-value</title>
        <pubTime>2016-05-19T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/20/effcpp3d-2016-05-20-Item-19-treat-class-design-as-type-design/</loc>
    <lastmod>2018-03-07T08:52:31.963Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记19』 设计 class 犹如设计 type</title>
        <pubTime>2016-05-19T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/15/effcpp3d-2016-05-18-Item-18-make-interfaces-easy-to-use-correctly-and-hard-to-use-incorrectly/</loc>
    <lastmod>2018-03-07T08:50:45.285Z</lastmod>
    <data>
        <display>
        <title>Effective C++ 读书笔记18』 让接口容易被正确使用，不易被误用</title>
        <pubTime>2016-05-14T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/13/effcpp3d-2016-05-13-Item-17-store-newed-objects-in-smart-pointers-in-standalone-statements/</loc>
    <lastmod>2018-03-07T08:49:26.417Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记17』 以独立语句将 newd 对象置入智能指针</title>
        <pubTime>2016-05-12T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/12/effcpp3d-2016-05-12-Item-16-use-the-same-from-in-corresponding-uses-of-new-and-delete/</loc>
    <lastmod>2018-03-07T08:42:26.255Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记16』 成对使用 new 和 delete 时要采用相同形式</title>
        <pubTime>2016-05-11T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/11/effcpp3d-2016-05-11-Item-15-provide-access-to-raw-resources-in-resources-managing-classes/</loc>
    <lastmod>2018-03-07T08:38:27.974Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记15』 在资源管理类中提供对原始资源的访问</title>
        <pubTime>2016-05-10T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/09/effcpp3d-2016-05-09-Item-14-think-carefully-about-copying-behaving-in-resource-managing-classes/</loc>
    <lastmod>2018-03-07T08:20:56.002Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记14』 资源管理类中小心 copying 行为</title>
        <pubTime>2016-05-08T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/07/effcpp3d-2016-05-07-Item-13-use-objects-to-manage-resources/</loc>
    <lastmod>2018-03-07T07:31:53.646Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记13』 以对象管理资源(Use objects to manage resources)</title>
        <pubTime>2016-05-06T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/06/effcpp3d-2016-05-06-Item-12-copy-all-parts-of-an-object/</loc>
    <lastmod>2018-03-07T06:40:12.100Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记12』  复制对象时勿忘其每一个成分（Copy all parts of an object）</title>
        <pubTime>2016-05-05T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/04/effcpp3d-2016-05-04-Item-11-handle-assignment-to-self-in-operator/</loc>
    <lastmod>2018-03-07T05:57:14.688Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记11』 在 operator= 中处理『自我赋值』</title>
        <pubTime>2016-05-03T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/02/effcpp3d-2016-05-02-Item-09-never-call-virtual-functions-during-construction-or-destruction/</loc>
    <lastmod>2018-03-07T05:56:28.650Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记9』 绝不在构造和析构过程中调用`virtual`函数（Never call virtual functions during construction or destruction）</title>
        <pubTime>2016-05-01T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/04/29/effcpp3d-2016-04-29-Item-06-explicity-disallow-the-use-of-compiler-generated-functions-you-do-not-want/</loc>
    <lastmod>2018-03-07T05:55:29.357Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记6』 若不想使用编译器自动生成的函数，就该明确拒绝</title>
        <pubTime>2016-04-28T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/04/29/effcpp3d-2016-04-29-Item-07-declare-destructors-virtual-in-polymorphic-base-classes/</loc>
    <lastmod>2018-03-07T05:49:05.227Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记7』为多态基类声明 virtual 析构函数（Declare destruction virtual in polymorphic base classes）</title>
        <pubTime>2016-04-28T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/01/effcpp3d-2016-05-01-Item-08-prevent-exeception-from-leaving-destructors/</loc>
    <lastmod>2018-03-07T05:49:03.344Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记7』 别让异常逃离析构函数（Prevent exceptions from leaving destructors）</title>
        <pubTime>2016-04-30T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/05/03/effcpp3d-2016-05-03-Item-10-have-assignment-operators-return-a-reference-to-this/</loc>
    <lastmod>2018-03-07T05:30:57.845Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记10』 令 operator= 返回一个 reference to *this</title>
        <pubTime>2016-05-02T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/04/27/effcpp3d-2016-04-27-Item-04-%E7%A1%AE%E5%AE%9A%E5%AF%B9%E8%B1%A1%E8%A2%AB%E4%BD%BF%E7%94%A8%E5%89%8D%E5%B7%B2%E5%85%88%E8%A2%AB%E5%88%9D%E5%A7%8B%E5%8C%96/</loc>
    <lastmod>2018-03-06T13:59:23.372Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记4』确定对象被使用前已先被初始化</title>
        <pubTime>2016-04-26T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2015/10/27/effcpp3d-2015-10-27-Item-03-%E5%B0%BD%E5%8F%AF%E8%83%BD%E4%BD%BF%E7%94%A8-const/</loc>
    <lastmod>2018-03-06T09:37:16.129Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记3』尽可能使用 const</title>
        <pubTime>2015-10-26T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2015/10/10/effcpp3d-2015-10-10-Item-02-prefer-consts-enums-and-inlines-to-define/</loc>
    <lastmod>2018-03-06T08:19:01.689Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记2』尽量以 const，enum，inline 替换 #define </title>
        <pubTime>2015-10-09T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/04/effcpp3d-2015-07-04-Item-01-view-c-as-a-federation-of-languages/</loc>
    <lastmod>2018-03-06T06:35:03.996Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记1』 视 C++ 为一个语言联邦</title>
        <pubTime>2016-07-03T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2015/07/01/effcpp3d-2015-07-01-c-%E5%AF%BC%E8%AF%BB/</loc>
    <lastmod>2018-03-06T06:17:13.543Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记 0』导读</title>
        <pubTime>2015-06-30T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2018/03/05/Install-KODI-for-IOS/</loc>
    <lastmod>2018-03-05T07:21:37.233Z</lastmod>
    <data>
        <display>
        <title>Install KODI for IOS</title>
        <pubTime>2018-03-05T07:18:37.000Z</pubTime>
        
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2018/02/07/DIY-Build-downloader/</loc>
    <lastmod>2018-02-24T08:38:11.094Z</lastmod>
    <data>
        <display>
        <title>家用工具 DIY 一 下载机</title>
        <pubTime>2018-02-07T03:30:08.000Z</pubTime>
        
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2018/01/28/libgtk-3-bin-or-libgtk-3-common-error-connot-install-any-packages/</loc>
    <lastmod>2018-01-27T16:11:26.777Z</lastmod>
    <data>
        <display>
        <title>libgtk-3-bin or libgtk-3-common error connot install any packages</title>
        <pubTime>2018-01-27T16:01:52.000Z</pubTime>
        
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/04/28/effcpp3d-2016-04-28-Item-05-%E4%BA%86%E8%A7%A3-C-%E9%BB%98%E9%BB%98%E7%BC%96%E5%86%99%E5%B9%B6%E8%B0%83%E7%94%A8%E5%93%AA%E4%BA%9B%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2017-07-15T12:53:05.000Z</lastmod>
    <data>
        <display>
        <title>『Effective C++ 读书笔记5』了解 C++ 默默编写并调用哪些函数</title>
        <pubTime>2016-04-27T16:00:00.000Z</pubTime>
        
        <tag>cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/08/effcpp3d-2016-07-08-Item-45-use-member-function-templates-to-accept-all-compatible-types/</loc>
    <lastmod>2016-12-31T01:55:35.000Z</lastmod>
    <data>
        <display>
        <title>Item 45 运用成员函数模板接受所有兼容类型</title>
        <pubTime>2016-07-08T02:16:34.000Z</pubTime>
        
        <tag>Effective cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/08/effcpp3d-2016-07-08-Item-46-define-non-member-functions-inside-template-when-type-conversions-are-desired/</loc>
    <lastmod>2016-12-28T15:38:07.000Z</lastmod>
    <data>
        <display>
        <title>Item 46 需要类型转换时请为模板定义非成员函数</title>
        <pubTime>2016-07-08T02:29:10.000Z</pubTime>
        
        <tag>Effective cpp</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/07/effcpp3d-2016-07-07-Item-53-%E4%B8%8D%E8%A6%81%E8%BD%BB%E5%BF%BD%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E8%AD%A6%E5%91%8A/</loc>
    <lastmod>2016-07-09T08:25:05.000Z</lastmod>
    <data>
        <display>
        <title>Item 53 不要轻忽编译器的警告</title>
        <pubTime>2016-07-07T06:23:45.000Z</pubTime>
        
        <tag>cpp</tag>
         
        <tag>写给自己看的教程</tag>
         
        <tag>effective c++ 之杂项讨论</tag>
         
         
           
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://wanggl1985.github.io/2016/07/07/effcpp3d-2016-07-07-Item-54-%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%86%9F%E6%82%89%E5%8C%85%E6%8B%AC-TR1-%E5%9C%A8%E5%86%85%E7%9A%84%E6%A0%87%E5%87%86%E7%A8%8B%E5%BA%8F%E5%BA%93/</loc>
    <lastmod>2016-07-09T08:25:05.000Z</lastmod>
    <data>
        <display>
        <title>Item 54 让自己熟悉包括 TR1 在内的标准程序库</title>
        <pubTime>2016-07-07T06:28:06.000Z</pubTime>
        
        <tag>cpp</tag>
         
        <tag>写给自己看的教程</tag>
         
        <tag>effective c++ 之杂项讨论</tag>
         
         
           
        </display>
    </data>
    </url>

</urlset>